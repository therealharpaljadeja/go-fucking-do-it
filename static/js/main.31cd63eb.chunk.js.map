{"version":3,"sources":["Jazzicon.js","Header.js","PromiseForm.js","ModalComponent.js","InstallMetamask.js","AddChain.js","HowItWorks.js","Promises.js","App.js","theme.js","index.js"],"names":["Jazzicon","container","createRef","this","appendJazzicon","children","current","removeChild","address","props","seed","parseInt","slice","image","jazzicon","appendChild","ref","PureComponent","Header","toast","useToast","useState","isLoading","setisLoading","useColorMode","toggleColorMode","colorMode","requestConnect","a","window","ethereum","request","method","then","setCurrentAccount","selectedAddress","catch","err","console","log","position","title","status","isClosable","px","py","w","boxShadow","align","style","cursor","onClick","setIsHome","as","size","colorScheme","mx","variant","chain","onOpen","chainId","isExternal","textDecoration","href","onChange","ml","mr","undefined","currentAccount","borderRadius","substr","bg","icon","PromiseForm","web3","Web3","promiseAmount","setPromiseAmount","promiseTask","setPromiseTask","promiseDeadline","setPromiseDeadline","friend","setFriend","isWaitingForConfirmation","setIsWaitingForConfirmation","Contract","eth","abi","createPromise","event","preventDefault","nowTimestamp","Date","endTimeStamp","Math","floor","setDate","getDate","methods","utils","toWei","send","from","value","on","error","receipt","code","link","transactionHash","render","color","p","ExternalLink","hash","mt","border","borderColor","borderStyle","alignSelf","padding","margin","maxW","onSubmit","justifyContent","maxWidth","spacing","justify","fontSize","target","type","isRequired","resize","rows","cols","placeholder","textAlign","width","ModalComponent","isCentered","closeModalOnOverlayClick","isOpen","motionPreset","onClose","InstallMetamask","rightIcon","AddChain","mainnetOptions","chainName","nativeCurrency","name","symbol","decimals","rpcUrls","blockExplorerUrls","isAddingMainnetChain","setIsAddingMainnetChain","addChain","chainOptions","params","HowItWorks","Promises","promisesToFulfill","setPromisesToFulfill","promisesToVerify","setPromisesToVerify","isLoadingPromisesToFulfill","setIsLoadingPromisesToFulfill","isLoadingPromisesToVerify","setIsLoadingPromisesToVerify","isFulfillingPromise","setIsFulfillingPromise","getPromisesToFulfill","useCallback","getPendingPromises","call","result","promises","res","getPendingPromise","promise","push","getPromisesToVerify","getPromisesToBeFulfilled","useEffect","gap","marginTop","templateColumns","hasArrow","label","placement","m","borderBottomWidth","opacity","borderTopWidth","map","toDateString","toLocaleTimeString","id","prev","fulfillPromise","App","useDisclosure","isHome","accounts","getChainId","newChainId","setChainId","networkVersion","Fragment","height","theme","extendTheme","config","initialColorMode","useSystemColorMode","fonts","heading","body","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.31cd63eb.chunk.js","sourcesContent":["import {createRef, PureComponent} from \"react\";\r\nimport jazzicon from \"@metamask/jazzicon\";\r\n\r\nexport default class Jazzicon extends PureComponent {\r\n    container = createRef();\r\n\r\n    componentDidMount() {\r\n        this.appendJazzicon();\r\n    }\r\n\r\n    componentDidUpdate(){\r\n        const { children } = this.container.current;\r\n        this.container.current.removeChild(children[0]);\r\n        this.appendJazzicon();\r\n    }\r\n\r\n    appendJazzicon() {\r\n        const address = this.props.address;\r\n        const diameter = 20;\r\n        const seed = parseInt(address.slice(2,10), 16);\r\n        const image = jazzicon(diameter, seed);\r\n        this.container.current.appendChild(image); \r\n    }\r\n\r\n    render() {\r\n        return <span ref={this.container}></span>\r\n    }\r\n}","import { useState } from \"react\";\r\nimport { Flex, Spacer, Box, Heading, Button, Switch, useColorMode, Tag, useToast, TagLabel, Avatar, Link } from \"@chakra-ui/react\";\r\nimport Jazzicon from \"./Jazzicon\";\r\n\r\nfunction Header(props){\r\n    const toast = useToast();\r\n    const [isLoading, setisLoading] = useState(false);\r\n    const { colorMode, toggleColorMode } = useColorMode();\r\n\r\n    const requestConnect = async () => {\r\n        setisLoading(true);\r\n        window.ethereum.request({\r\n            method: \"eth_requestAccounts\"\r\n        }).then(() => {\r\n            props.setCurrentAccount(window.ethereum.selectedAddress);\r\n            setisLoading(false);\r\n        }).catch((err) => {\r\n            console.log(err);\r\n            toast({\r\n                position: \"bottom-right\",\r\n                title: `Request Rejected`,\r\n                status: \"error\",\r\n                isClosable: true\r\n            })\r\n            setisLoading(false);\r\n        })\r\n    }\r\n    return (\r\n        <Flex\r\n            px={10}\r\n            py={4}\r\n            w=\"100vw\"\r\n            boxShadow=\"lg\"\r\n            align=\"center\"\r\n        >    \r\n            <Box> \r\n                <Heading style={{cursor: \"pointer\"}} onClick={() => props.setIsHome(true)} as=\"h2\" size=\"lg\" colorScheme=\"twitter\">\r\n                    Go-Fucking-Do-It!\r\n                </Heading>\r\n            </Box>\r\n            <Spacer />\r\n            <Box\r\n                mx={2}\r\n            >\r\n                <Tag variant=\"solid\" size=\"lg\" colorScheme=\"twitter\">\r\n                    {props.chain}\r\n                </Tag>\r\n            </Box>\r\n            <Box\r\n                mx={2}\r\n            >\r\n                <Button onClick={props.onOpen} variant=\"ghost\" colorScheme=\"twitter\">\r\n                    How it Works?\r\n                </Button>\r\n            </Box>\r\n            <Box\r\n                mx={2}\r\n            >\r\n                <Button onClick={() => props.setIsHome(false)} variant=\"ghost\" colorScheme=\"twitter\">\r\n                    Promises\r\n                </Button>\r\n            </Box>\r\n            <Box>\r\n                {\r\n                    props.chainId == \"137\" ?\r\n                    <Link isExternal style={{textDecoration: \"none\"}} href=\"https://explorer-mainnet.maticvigil.com/address/0x8E96E9B6bCB3DA7e7459f3115B4D4Ca364050429\">\r\n                        <Button variant=\"ghost\" colorScheme=\"twitter\">Contract</Button>\r\n                    </Link> : \r\n                    \"\"\r\n                }\r\n            </Box>\r\n            <Box\r\n                mx={2}\r\n            >\r\n                <Switch colorScheme=\"twitter\" size=\"lg\" onChange={toggleColorMode}>\r\n\r\n                </Switch>\r\n            </Box>\r\n            <Box\r\n                ml={7}\r\n                mr={2}\r\n            >\r\n                {\r\n                    props.currentAccount == undefined ?\r\n                        <Button isLoading={isLoading} onClick={requestConnect} variant=\"solid\" colorScheme=\"twitter\">\r\n                            Connect\r\n                        </Button> :\r\n                        <Tag\r\n                            size=\"lg\"\r\n                            borderRadius=\"full\"\r\n                            ml={3}\r\n                            mr={-2}\r\n                        >\r\n                            <TagLabel>\r\n                                {`${props.currentAccount.substr(0,6)}...${props.currentAccount.substr(-4)}`}\r\n                            </TagLabel>\r\n                            <Avatar ml={3} size=\"xs\" bg=\"transparent\" icon={<Jazzicon address={props.currentAccount} />} />\r\n                        </Tag>\r\n                        \r\n                }                  \r\n            </Box>\r\n        </Flex>\r\n    );\r\n}\r\n\r\nexport default Header;","import { useState } from \"react\";\r\nimport {\r\n    Stack,\r\n    Button,\r\n    FormControl,\r\n    FormLabel,\r\n    Input,\r\n    InputGroup,\r\n    HStack,\r\n    InputRightAddon,\r\n    Textarea,\r\n    Box,\r\n    FormHelperText,\r\n    useToast,\r\n    VStack,\r\n    Link\r\n} from \"@chakra-ui/react\";\r\nimport Web3 from \"web3\";\r\nimport abi from \"./abi.json\";\r\nimport { ExternalLinkIcon } from \"@chakra-ui/icons\";\r\n\r\nfunction PromiseForm(props) {\r\n    const web3 = new Web3(window.ethereum);\r\n    const toast = useToast();\r\n    const [promiseAmount, setPromiseAmount] = useState(\"\");\r\n    const [promiseTask, setPromiseTask] = useState(\"I will \");\r\n    const [promiseDeadline, setPromiseDeadline] = useState(\"\");\r\n    const [friend, setFriend] = useState(\"\");\r\n    const [isWaitingForConfirmation, setIsWaitingForConfirmation] = useState(false);\r\n\r\n    const Contract = new web3.eth.Contract(abi, \"0x8E96E9B6bCB3DA7e7459f3115B4D4Ca364050429\");\r\n\r\n    const createPromise = async (event) => {\r\n        event.preventDefault();\r\n        setIsWaitingForConfirmation(true);\r\n        const nowTimestamp = new Date();\r\n        const endTimeStamp = Math.floor(nowTimestamp.setDate(nowTimestamp.getDate() + 10) / 1000);\r\n        const tx = Contract.methods.createPromise(promiseTask, web3.utils.toWei(promiseAmount, \"ether\"), friend, endTimeStamp)\r\n        .send({from: props.currentAccount, value:web3.utils.toWei(promiseAmount, \"ether\")})\r\n        .on(\"error\", (error, receipt) => {\r\n            setIsWaitingForConfirmation(false);\r\n            if(error.code == 4001) {\r\n                toast({\r\n                    position: \"bottom-right\",\r\n                    title: \"User Denied Transaction\",\r\n                    status: \"error\",\r\n                    isClosable: true\r\n                });    \r\n            } else {\r\n                var link = \"\";\r\n                link = `https://explorer-mainnet.maticvigil.com/tx/${receipt.transactionHash}`;\r\n                toast({\r\n                    position: \"bottom-right\",\r\n                    isClosable: true,\r\n                    render: () => (\r\n                        <Box color=\"white\" borderRadius={3} p={3} bg=\"red.400\">\r\n                            <Link isExternal href={link} style={{cursor: \"pointer\"}}>\r\n                                View Transaction <ExternalLinkIcon />\r\n                            </Link>\r\n                        </Box>\r\n                    ) \r\n                });\r\n            }\r\n        })\r\n        .on(\"transactionHash\", (hash) => {\r\n            setIsWaitingForConfirmation(false);\r\n            var link;\r\n            link = `https://explorer-mainnet.maticvigil.com/tx/${hash}`;\r\n            toast({\r\n                position: \"bottom-right\",\r\n                render: () => (\r\n                    <Box color=\"white\" borderRadius={3} p={3} bg=\"green.400\">\r\n                        <Link isExternal href={link} style={{cursor: \"pointer\"}}>\r\n                            View Transaction <ExternalLinkIcon />\r\n                        </Link>\r\n                    </Box>\r\n                ) \r\n            });\r\n        });\r\n    }\r\n\r\n    return (\r\n        <Box boxShadow=\"lg\" mt=\"3rem !important\" border=\"2px\" borderColor=\"blue.200\" borderStyle=\"solid\" as=\"div\" alignSelf=\"center\" padding={10} borderRadius={10} margin=\"auto\" maxW={1000}>\r\n            <form onSubmit={createPromise} method=\"POST\">\r\n                <Stack justifyContent=\"center\" maxWidth={1000} spacing={5} margin=\"auto\">\r\n                    <FormControl>\r\n                        <HStack w={600} justify=\"center\" align=\"center\">\r\n                            <FormLabel as=\"label\" fontSize={22}>\r\n                                I Promise\r\n                            </FormLabel>\r\n                            <InputGroup maxW={40}>\r\n                                <Input onChange={({target}) => setPromiseAmount(target.value)} value={promiseAmount} type=\"number\" isRequired />\r\n                                <InputRightAddon children=\"MATIC\" />\r\n                            </InputGroup>\r\n                            <FormLabel fontSize={22}>\r\n                                that\r\n                            </FormLabel>\r\n                        </HStack>\r\n                    </FormControl>\r\n                    <FormControl>\r\n                        <Textarea isRequired onChange={({target}) => setPromiseTask(target.value)} value={promiseTask} size=\"lg\" resize=\"vertical\" rows=\"3\" cols=\"45\" placeholder=\"I will\" variant=\"outline\" />\r\n                    </FormControl>\r\n                    <FormControl>\r\n                        <HStack justify=\"center\" align=\"center\">\r\n                            <FormLabel as=\"label\" fontSize={22}>\r\n                                in\r\n                        </FormLabel>\r\n                            <InputGroup maxW={40}>\r\n                                <Input onChange={({target}) => setPromiseDeadline(target.value)} value={promiseDeadline} type=\"number\" isRequired />\r\n                            </InputGroup>\r\n                            <FormLabel fontSize={22}>\r\n                                days.\r\n                        </FormLabel>\r\n                        </HStack>\r\n                    </FormControl>\r\n                    <FormControl>\r\n                        <Input onChange={({target}) => setFriend(target.value)} value={friend} isRequired placeholder=\"Friend's wallet address\" />\r\n                        <FormHelperText>Double Check otherwise your friend won't be able to verify.</FormHelperText>\r\n                    </FormControl>\r\n                    <FormControl textAlign=\"center\">\r\n                        <Button isLoading={isWaitingForConfirmation} width=\"100%\" fontSize={20} py={7} type=\"submit\" variant=\"solid\" colorScheme=\"twitter\">Promise</Button>\r\n                        <FormHelperText>1% Fee for using app.</FormHelperText>\r\n                    </FormControl>\r\n                </Stack>\r\n            </form>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default PromiseForm;","import { \r\n    Modal,\r\n    ModalOverlay, \r\n} from \"@chakra-ui/react\";\r\n\r\nfunction ModalComponent(props) {\r\n    return (\r\n        <Modal \r\n            isCentered  \r\n            closeModalOnOverlayClick={false} \r\n            isOpen={props.children.props.isOpen}\r\n            motionPreset=\"slideInBottom\"\r\n            onClose={props.children.props.onClose}\r\n        >\r\n            <ModalOverlay />\r\n            {props.children}\r\n        </Modal>\r\n    );\r\n}\r\n\r\nexport default ModalComponent;","import { \r\n    ModalBody, \r\n    ModalContent, \r\n    ModalHeader, \r\n    ModalFooter, \r\n    Link,\r\n    Button\r\n} from \"@chakra-ui/react\";\r\n\r\nimport { FaExternalLinkAlt } from \"react-icons/fa\";\r\n\r\nfunction InstallMetamask() {\r\n    return (\r\n        <ModalContent>\r\n            <ModalHeader>Metamask Not Installed!</ModalHeader>\r\n            <ModalBody>\r\n                Please Install Metamask.\r\n            </ModalBody>\r\n            <ModalFooter>\r\n                <Link \r\n                    href=\"https://chrome.google.com/webstore/detail/metamask/nkbihfbeogaeaoehlefnkodbefgpgknn?hl=en\" \r\n                    isExternal\r\n                >\r\n                    <Button colorScheme=\"blue\" mr={3} rightIcon={<FaExternalLinkAlt />}>\r\n                        Install On Chrome \r\n                    </Button>\r\n                </Link>\r\n                <Link href=\"https://addons.mozilla.org/en-US/firefox/addon/ether-metamask/\" isExternal>\r\n                    <Button colorScheme=\"orange\" rightIcon={<FaExternalLinkAlt />}>\r\n                        Install On Firefox \r\n                    </Button>\r\n                </Link>\r\n                \r\n            </ModalFooter>\r\n        </ModalContent>        \r\n    );\r\n}\r\n\r\nexport default InstallMetamask;\r\n\r\n","import { useState } from \"react\";\r\nimport { \r\n    ModalBody, \r\n    ModalContent, \r\n    ModalHeader, \r\n    ModalFooter, \r\n    Button,\r\n    useToast\r\n} from \"@chakra-ui/react\";\r\n\r\n\r\n\r\nfunction AddChain() {\r\n    const toast = useToast();\r\n    const mainnetOptions = {\r\n        chainId: \"0x89\",\r\n        chainName: \"Matic Network\",\r\n        nativeCurrency: {\r\n            name: \"MATIC\",\r\n            symbol: \"MATIC\",\r\n            decimals: 18\r\n        },\r\n        rpcUrls: [\"https://rpc-mainnet.maticvigil.com/\"],\r\n        blockExplorerUrls: [\"https://explorer.maticvigil.com\"]\r\n    }\r\n\r\n    const [isAddingMainnetChain, setIsAddingMainnetChain] = useState(false);\r\n\r\n    const addChain = async (chainOptions, type) => {\r\n        setIsAddingMainnetChain(true);    \r\n        \r\n        window.ethereum.request({\r\n            method: \"wallet_addEthereumChain\",\r\n            params: [chainOptions]\r\n        }).then((type) => {\r\n            setIsAddingMainnetChain(false);\r\n            toast({\r\n                position: \"top-right\",\r\n                title: \"Connected\",\r\n                status: \"success\",\r\n                isClosable: true\r\n            });\r\n        })\r\n        .catch((err, type) => {\r\n            setIsAddingMainnetChain(false);\r\n            toast({\r\n                position: \"top-right\",\r\n                title: `Request Rejected`,\r\n                status: \"error\",\r\n                isClosable: true\r\n            })\r\n        });\r\n    }\r\n\r\n\r\n    return (\r\n        <ModalContent>\r\n            <ModalHeader textAlign=\"center\">Incorrect Chain Selected!</ModalHeader>\r\n            <ModalBody textAlign=\"center\">\r\n                Please connect to Matic Network.\r\n            </ModalBody>\r\n            <ModalFooter justifyContent=\"center\">\r\n                <Button isLoading={isAddingMainnetChain} onClick={() => addChain(mainnetOptions, \"MAINNET\")} colorScheme=\"blue\" mr={3}>\r\n                    Add Matic Mainnet \r\n                </Button>                \r\n            </ModalFooter>\r\n        </ModalContent>        \r\n    );\r\n}\r\n\r\nexport default AddChain;\r\n\r\n","import { \r\n    ModalBody, \r\n    ModalContent, \r\n    ModalCloseButton, \r\n    ModalHeader, \r\n    ModalFooter, \r\n    UnorderedList,\r\n    ListItem,\r\n} from \"@chakra-ui/react\";\r\n\r\n\r\nfunction HowItWorks() {\r\n    return (\r\n        <ModalContent>\r\n            <ModalCloseButton />\r\n            <ModalHeader>How It Works</ModalHeader>\r\n            <ModalBody>\r\n                <UnorderedList spacing={5}>\r\n                    <ListItem>\r\n                        Go-Fucking-Do-It is a fear motivation tool. There is 1% fee to use the app because i have a stomach too. \r\n                    </ListItem>\r\n                    <ListItem>\r\n                        First you make a promise to be fulfilled within a deadline by staking your cryptocurrency. \r\n                    </ListItem>\r\n                    <ListItem>\r\n                        You also specify your friend's wallet address. This friend is your verifier.  \r\n                    </ListItem>\r\n                    <ListItem>\r\n                        If your friend goes to \"Promises\" page and clicks the \"Fulfill\" button corresponding to your promise before the deadline then you receive the funds you staked back (Excluding Gas Fees). \r\n                    </ListItem>\r\n                    <ListItem>\r\n                        But if deadline has passed then either the friend can fulfill the promise or Me. When fulfill is clicked the funds will be sent to me! 😝\r\n                    </ListItem>\r\n                    <ListItem>\r\n                        You can see your pending promises and the promises for which you have been assigned as friend on \"Promises\" page.\r\n                    </ListItem>\r\n                </UnorderedList>\r\n            </ModalBody>\r\n            <ModalFooter></ModalFooter>\r\n        </ModalContent>        \r\n    );\r\n}\r\n\r\nexport default HowItWorks;\r\n\r\n","import { Box, Divider, Grid, GridItem, Heading, HStack, Tooltip, Spinner, Table, Thead, Tr, Th, Tbody, TagCloseButton, Tag, Button, useToast, Link } from \"@chakra-ui/react\";\r\nimport { useState, useEffect, useCallback } from \"react\";\r\nimport { FaInfoCircle } from \"react-icons/fa\";\r\nimport Web3 from \"web3\";\r\nimport abi from \"./abi.json\";\r\nimport { ExternalLinkIcon } from \"@chakra-ui/icons\";\r\n\r\nfunction Promises(props) {\r\n\r\n    const web3 = new Web3(window.ethereum);\r\n    const toast = useToast();\r\n    const Contract = new web3.eth.Contract(abi, \"0x8E96E9B6bCB3DA7e7459f3115B4D4Ca364050429\");\r\n    const [promisesToFulfill, setPromisesToFulfill] = useState([]);\r\n    const [promisesToVerify, setPromisesToVerify] = useState([]);\r\n    const [isLoadingPromisesToFulfill, setIsLoadingPromisesToFulfill] = useState(true);\r\n    const [isLoadingPromisesToVerify, setIsLoadingPromisesToVerify] = useState(true);\r\n    const [isFulfillingPromise, setIsFulfillingPromise] = useState([]);\r\n\r\n    const getPromisesToFulfill = useCallback(async () => {\r\n        setIsLoadingPromisesToFulfill(true);\r\n        const result = await Contract.methods.getPendingPromises().call({from: props.currentAccount});\r\n        const promises = [];\r\n        for(const res of result) {\r\n            const promise = await Contract.methods.getPendingPromise(res).call();\r\n            promises.push(promise);\r\n        }\r\n        setPromisesToFulfill([...promises]);\r\n        setIsLoadingPromisesToFulfill(false);\r\n    }, [props.currentAccount]);\r\n\r\n    \r\n    const getPromisesToVerify = useCallback(async () => {\r\n        setIsLoadingPromisesToVerify(true);\r\n        const result = await Contract.methods.getPromisesToBeFulfilled().call({from: props.currentAccount});\r\n        const promises = [];\r\n        for(const res of result) {\r\n            const promise = await Contract.methods.getPendingPromise(res).call();\r\n            promises.push(promise);\r\n        }\r\n        setPromisesToVerify([...promises]);\r\n        setIsLoadingPromisesToVerify(false);\r\n    }, [props.currentAccount]);\r\n\r\n    const fulfillPromise = (id) => {\r\n        setIsFulfillingPromise(prev => ({...prev, [id]: true}));\r\n        Contract.methods.fulfillPromise(id).send({from: props.currentAccount})\r\n        .on(\"transactionHash\", (hash) => {\r\n            var link = \"\";\r\n            link = `https://explorer-mainnet.maticvigil.com/tx/${hash}`;\r\n            toast({\r\n                position: \"bottom-right\",\r\n                render: () => (\r\n                    <Box color=\"white\" borderRadius={3} p={3} bg=\"blue.400\">\r\n                        <Link isExternal href={link} style={{cursor: \"pointer\"}}>\r\n                            View Transaction <ExternalLinkIcon />\r\n                        </Link>\r\n                    </Box>\r\n                ) \r\n            });\r\n        })\r\n        .on(\"receipt\", (receipt) => {\r\n            console.log(receipt);\r\n            setIsFulfillingPromise(prev => ({...prev, [id]: false}));\r\n            getPromisesToVerify();\r\n        })\r\n        .on(\"error\", (err, receipt) => {\r\n            console.log(receipt);\r\n            if(err.code == 4001) {\r\n                toast({\r\n                    position: \"bottom-right\",\r\n                    title: \"User Denied Transaction\",\r\n                    status: \"error\",\r\n                    isClosable: true\r\n                });    \r\n            } else {\r\n                var link = \"\";\r\n                link = `https://explorer-mainnet.maticvigil.com/tx/${receipt.transactionHash}`;\r\n                toast({\r\n                    position: \"bottom-right\",\r\n                    isClosable: true,\r\n                    render: () => (\r\n                        <Box color=\"white\" borderRadius={3} p={3} bg=\"red.400\">\r\n                            <Link isExternal href={link} style={{cursor: \"pointer\"}}>\r\n                                View Transaction <ExternalLinkIcon />\r\n                            </Link>\r\n                        </Box>\r\n                    ) \r\n                });\r\n            }\r\n            setIsFulfillingPromise(prev => ({...prev, [id]: false}));\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        console.log(props.chainId);\r\n        getPromisesToFulfill();\r\n        getPromisesToVerify();\r\n    }, [getPromisesToFulfill, getPromisesToVerify, props.chainId])\r\n    \r\n    var promiseComponents = [];\r\n\r\n    return (\r\n        <Grid gap={50} px=\"40px\" py=\"50px\" marginTop=\"0px !important\" templateColumns=\"repeat(2, 1fr)\">\r\n            <GridItem>\r\n                <HStack>\r\n                    <Heading as=\"h2\" size=\"lg\" colorScheme=\"blue\">\r\n                        Promises to Fulfill\r\n                    </Heading>\r\n                    <Tooltip hasArrow size=\"md\" label=\"Tasks to be performed\" placement=\"top\">\r\n                        <span>\r\n                            <FaInfoCircle />\r\n                        </span>\r\n                    </Tooltip>\r\n                </HStack>\r\n                <Divider m={0} mt={3} borderBottomWidth={0} opacity=\"1\" borderTopWidth={3} borderColor=\"twitter.600\"/>\r\n                {\r\n                    isLoadingPromisesToFulfill ? <Spinner alignSelf=\"center\" /> :\r\n                    <Table>\r\n                        <Thead>\r\n                            <Tr>\r\n                                <Th>Promise Task</Th>\r\n                                <Th>Deadline</Th>\r\n                            </Tr>\r\n                        </Thead>\r\n                        <Tbody>\r\n                            {\r\n                                promisesToFulfill.map((promise) => {\r\n                                    return (<Tr key={promise[\"0\"]}>\r\n                                        <Th>\r\n                                            {promise[\"promiseTask\"]}\r\n                                        </Th>\r\n                                        <Th>\r\n                                            <Tag>\r\n                                                {`${new Date(parseInt(promise[\"endTime\"]) * 1000).toDateString()} ${new Date(parseInt(promise[\"endTime\"]) * 1000).toLocaleTimeString()}`}\r\n                                            </Tag>                                        \r\n                                        </Th>\r\n                                    </Tr>)\r\n                                })\r\n                            }\r\n                        </Tbody>\r\n                    </Table> \r\n                }\r\n            </GridItem>\r\n            <GridItem>\r\n                <HStack>\r\n                    <Heading as=\"h2\" size=\"lg\" colorScheme=\"blue\">\r\n                        Promises to Verify\r\n                    </Heading>\r\n                    <Tooltip hasArrow size=\"md\" label=\"Tasks to be verified by you\" placement=\"top\">\r\n                        <span>\r\n                            <FaInfoCircle />\r\n                        </span>\r\n                    </Tooltip>\r\n                </HStack>\r\n                <Divider m={0} mt={3} borderBottomWidth={0} opacity=\"1\" borderTopWidth={3} borderColor=\"twitter.600\"/>\r\n                {\r\n                    isLoadingPromisesToVerify ? <Spinner alignSelf=\"center\" /> :\r\n                    <Table>\r\n                        <Thead>\r\n                            <Tr>\r\n                                <Th>Promise Task</Th>\r\n                                <Th>Deadline</Th>\r\n                                <Th></Th>\r\n                            </Tr>\r\n                        </Thead>\r\n                        <Tbody>\r\n                            {\r\n                                promisesToVerify.map((promise) => {\r\n                                    return (<Tr key={promise[\"0\"]}>\r\n                                        <Th>\r\n                                            {promise[\"promiseTask\"]}\r\n                                        </Th>\r\n                                        <Th>\r\n                                            <Tag>\r\n                                                {`${new Date(parseInt(promise[\"endTime\"]) * 1000).toDateString()} ${new Date(parseInt(promise[\"endTime\"]) * 1000).toLocaleTimeString()}`}\r\n                                            </Tag>                                     \r\n                                        </Th>\r\n                                        <Th>\r\n                                            <Button key={promise[\"0\"]} isLoading={isFulfillingPromise[promise[\"0\"]]}  onClick={() => fulfillPromise(promise[\"0\"])} colorScheme=\"twitter\">Fulfill</Button>\r\n                                        </Th>\r\n                                    </Tr>)\r\n                                })\r\n                            }\r\n                        </Tbody>\r\n                    </Table> \r\n                }\r\n            </GridItem>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nexport default Promises;","import './App.css';\r\nimport { useState } from \"react\";\r\nimport { Stack, useDisclosure } from \"@chakra-ui/react\";\r\nimport Header from './Header';\r\nimport PromiseForm from \"./PromiseForm\";\r\nimport ModalComponent from \"./ModalComponent\";\r\nimport InstallMetamask from \"./InstallMetamask\";\r\nimport React from 'react';\r\nimport AddChain from './AddChain';\r\nimport Web3 from 'web3';\r\nimport HowItWorks from './HowItWorks';\r\nimport Promises from './Promises';\r\n\r\nfunction App() {\r\n  const web3 = new Web3(window.ethereum);\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const [currentAccount, setCurrentAccount] = useState(window.ethereum.selectedAddress);\r\n  const [isHome, setIsHome] = useState(true);\r\n\r\n  window.ethereum.on(\"accountsChanged\", (accounts) => {\r\n    setCurrentAccount(accounts[0]);\r\n  });\r\n\r\n  window.ethereum.on(\"chainChanged\", async (chainId) => {\r\n    const newChainId = await web3.eth.getChainId();\r\n    setChainId(newChainId);\r\n  });\r\n\r\n  const [chainId, setChainId] = useState(window.ethereum.networkVersion);\r\n  return (\r\n    <React.Fragment>\r\n      <Stack justify=\"center\" spacing={20} height=\"100%\">\r\n        <Header setIsHome={setIsHome} currentAccount={currentAccount} setCurrentAccount={setCurrentAccount} onOpen={onOpen} chainId={chainId} chain={chainId == \"137\" ? \"MAINNET\" : \"INVALID CHAIN\"}  />\r\n        {\r\n          isHome ? \r\n          <PromiseForm currentAccount={currentAccount} chainId={chainId} /> :\r\n          <Promises currentAccount={currentAccount} chainId={chainId} />\r\n        } \r\n      </Stack>\r\n      {\r\n        window.ethereum === undefined ?\r\n        <ModalComponent>\r\n          <InstallMetamask isOpen=\"true\" /> \r\n        </ModalComponent> :\r\n        <ModalComponent>\r\n          <AddChain isOpen={!(chainId == \"137\")} />\r\n        </ModalComponent>\r\n      }\r\n      <ModalComponent>\r\n        <HowItWorks onClose={onClose} isOpen={isOpen} />\r\n      </ModalComponent>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { extendTheme, withDefaultColorScheme } from \"@chakra-ui/react\";\r\n\r\nconst config = {\r\n    initialColorMode: \"light\",\r\n    useSystemColorMode: false,\r\n}\r\n\r\nconst theme = extendTheme({ \r\n    config,\r\n    fonts: {\r\n        heading: \"Chivo\",\r\n        body: \"Chivo\"\r\n    }\r\n});\r\n\r\nexport default theme;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport theme from './theme';\r\nimport \"@fontsource/chivo/400.css\";\r\nimport \"@fontsource/chivo/700.css\";\r\n\r\nimport { ChakraProvider, ColorModeScript } from \"@chakra-ui/react\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <ChakraProvider theme={theme}>\r\n        <ColorModeScript initialColorMode={theme.config.initialColorMode}/>\r\n        <App />\r\n    </ChakraProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n"],"sourceRoot":""}